@* Define the model type this view expects. *@
@* You'll need to create this ViewModel class in Models/ViewModels folder. *@
@* It should contain a property like: public List<Project3.Models.DTOs.ReviewDto> Reviews { get; set; } *@
@model Project3.Models.ViewModels.ManageReviewsViewModel

@{
    // Set the title for the browser tab/window
    ViewData["Title"] = "Manage My Reviews";
    // Uncomment the line below if you have a specific layout file you want to use
    // Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>@ViewData["Title"]</h1>

<hr />

<div>
    @* Check if the Model and the Reviews list exist and have items before trying to display the table *@
    @if (Model != null && Model.Reviews != null && Model.Reviews.Any())
    {
        <p>Here are the reviews you have written:</p>
        <table class="table table-striped table-bordered">
            <thead class="thead-dark">
                @* Added some Bootstrap classes for basic styling *@
                <tr>
                    <th>Restaurant</th>
                    <th>Rating</th>
                    <th>Comment</th>
                    <th>Date</th>
                    <th>Actions</th> @* Column for Edit/Delete links *@
                </tr>
            </thead>
            <tbody>
                @* Loop through each review in the Model's Reviews list *@
                @foreach (var review in Model.Reviews)
                {
                    <tr>
                        @* Display review properties - Adjust property names if your ReviewDto is different *@
                        <td>@Html.DisplayFor(modelItem => review.RestaurantName)</td>
                        <td>@Html.DisplayFor(modelItem => review.Rating)</td>
                        <td>@Html.DisplayFor(modelItem => review.Comment)</td>
                        <td>@Html.DisplayFor(modelItem => review.ReviewDate)</td> @* Assuming ReviewDate is a DateTime, consider formatting *@
                        <td>
                            @* Use Tag Helpers to create links to Edit and Delete actions in ReviewController *@
                            @* Make sure ReviewController has Edit and Delete actions that accept a review ID *@
                            <a asp-controller="Review" asp-action="Edit" asp-route-id="@review.ReviewId" class="btn btn-sm btn-outline-primary">Edit</a> |
                            <a asp-controller="Review" asp-action="Delete" asp-route-id="@review.ReviewId" class="btn btn-sm btn-outline-danger">Delete</a>
                            @* You might want a confirmation dialog for delete later *@
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        @* Message shown if no reviews are found or the model wasn't passed correctly *@
        <p>You haven't written any reviews yet, or there was an issue loading them.</p>
    }
</div>

@* Optional: Add section for scripts if needed *@
@*
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Add any page-specific JavaScript here, e.g., for delete confirmations
        // $(document).ready(function() {
        //     $('.btn-outline-danger').on('click', function(e) {
        //         return confirm('Are you sure you want to delete this review?');
        //     });
        // });
    </script>
}
*@
