@model RestaurantDetailViewModel
@using System.Security.Claims
@{
    ViewData["Title"] = Model.Profile?.Name ?? "Restaurant Details";
    Layout = "_AppLayout"; // Use your main application layout
}

@if (Model.Profile != null)
{
    @* --- Restaurant Header --- *@
    <div class="restaurant-profile-header mb-4">
        @* TODO: Add Profile Photo display logic if needed at top *@
        <h1>@Model.Profile.Name</h1>
        <div class="d-flex align-items-center mb-2">
             @* Display calculated average rating and price level *@
             <span class="star-rating me-3">
                 @* TODO: Render stars based on Model.AverageRatingDisplay or calculation *@
                 @Model.AverageRatingDisplay
             </span>
             <span class="price-level text-muted">
                  @* TODO: Render price level based on Model.AveragePriceLevelDisplay or calculation *@
                  @Model.AveragePriceLevelDisplay
             </span>
             @* TODO: Add link to reviews section? *@
        </div>
        <p class="text-muted">@Model.Profile.Cuisine - @Model.Profile.City, @Model.Profile.State</p>
        @* Make Reservation Button - Now triggers modal *@
        <button type="button" class="btn btn-primary mt-2" data-bs-toggle="modal" data-bs-target="#reservationModal">
            Make Reservation
        </button>
    </div>

    <hr />

    <div class="row">
        <div class="col-md-8"> @* Main content area *@

             @* --- Marketing Description --- *@
             @if (!string.IsNullOrWhiteSpace(Model.Profile.MarketingDescription))
             {
                 <section id="description" class="mb-4">
                     <h2>About @Model.Profile.Name</h2>
                     <p>@Model.Profile.MarketingDescription</p>
                 </section>
             }

             @* --- Photo Gallery --- *@
             @if (Model.Photos != null && Model.Photos.Any())
             {
                 <section id="photos" class="mb-4">
                     <h2>Photos</h2>
                     <div class="row row-cols-2 row-cols-md-3 g-3">
                         @foreach (var photo in Model.Photos)
                         {
                             <div class="col">
                                 <figure class="figure">
                                     @* TODO: Ensure PhotoURL is correct relative/absolute path *@
                                     <img src="@Url.Content(photo.PhotoURL ?? "~/images/restaurant-placeholder.png")" class="figure-img img-fluid rounded" alt="@(photo.Caption ?? Model.Profile.Name)">
                                     @if (!string.IsNullOrWhiteSpace(photo.Caption))
                                     {
                                         <figcaption class="figure-caption">@photo.Caption</figcaption>
                                     }
                                 </figure>
                             </div>
                         }
                     </div>
                 </section>
             }

             @* --- Reviews Section --- *@
             <section id="reviews" class="mb-4">
                 <h2>Reviews (@Model.Reviews.Count)</h2>
                 @if (Model.Reviews != null && Model.Reviews.Any())
                 {
                     @foreach (var review in Model.Reviews)
                     {
                         <div class="card mb-3">
                             <div class="card-body">
                                 <div class="d-flex justify-content-between">
                                     <h5 class="card-title mb-1">@review.ReviewerUsername</h5>
                                     <small class="text-muted">@review.VisitDate.ToString("MMMM d, yyyy")</small>
                                 </div>
                                 <div class="mb-2">
                                     @* TODO: Display star rating for this specific review *@
                                     <span class="star-rating small">
                                          @* Logic to display stars based on avg of Food/Service/Atmosphere? Or overall? *@
                                     </span>
                                 </div>
                                 <p class="card-text">@review.Comments</p>
                                 @* TODO: Optionally display individual ratings (Food, Service, etc.) *@
                             </div>
                         </div>
                     }
                 }
                 else
                 {
                     <p>No reviews yet. Be the first to write one!</p>
                 }
                 @* Only show review button for reviewers *@
                 @if (User.IsInRole("Reviewer"))
                 {
                     <a asp-controller="Review" asp-action="Create" asp-route-restaurantId="@Model.RestaurantID" class="btn btn-secondary">Write a Review</a>
                 }
             </section>

        </div>
        <div class="col-md-4"> @* Sidebar Info *@
             <div class="card sticky-top" style="top: 20px;"> @* Make card sticky *@
                 <div class="card-body">
                     <h5 class="card-title">Restaurant Info</h5>
                     
                     @* --- Map Section --- *@
                     <div class="mb-3">
                         <div id="restaurantMap" style="height: 250px; width: 100%;"></div>
                     </div>

                     @* --- Address --- *@
                     <p class="mb-1">
                         <i class="fas fa-map-marker-alt me-2"></i> @* Font Awesome icon *@
                         @Model.Profile.Address<br />
                         @Model.Profile.City, @Model.Profile.State @Model.Profile.ZipCode
                     </p>

                     @* --- Contact --- *@
                     @if (!string.IsNullOrWhiteSpace(Model.Profile.Contact))
                     {
                         <p class="mb-1">
                             <i class="fas fa-phone me-2"></i>
                             @Model.Profile.Contact
                         </p>
                     }

                      @* --- Website --- *@
                     @if (!string.IsNullOrWhiteSpace(Model.Profile.WebsiteURL))
                     {
                         <p class="mb-1">
                              <i class="fas fa-globe me-2"></i>
                              @{
                                  var websiteUrl = Model.Profile.WebsiteURL;
                                  if (!websiteUrl.StartsWith("http")) { websiteUrl = "http://" + websiteUrl; }
                              }
                              <a href="@websiteUrl" target="_blank" rel="noopener noreferrer">Visit Website</a>
                         </p>
                     }

                     @* --- Hours --- *@
                      @if (!string.IsNullOrWhiteSpace(Model.Profile.Hours))
                     {
                         <p class="mb-1">
                             <i class="fas fa-clock me-2"></i>
                             Hours: @Model.Profile.Hours @* Consider formatting this better if possible *@
                         </p>
                     }

                     @* --- Get Directions Button --- *@
                     <div class="mt-3">
                         <a href="https://www.google.com/maps/search/?api=1&query=@Uri.EscapeDataString($"{Model.Profile.Address}, {Model.Profile.City}, {Model.Profile.State} {Model.Profile.ZipCode}")" 
                            target="_blank" class="btn btn-outline-primary btn-sm w-100">
                             <i class="fas fa-directions me-2"></i>Get Directions
                         </a>
                     </div>

                     @* --- Social Media --- *@
                     @* TODO: Add Social Media Links if available *@

                 </div>
             </div>
        </div>
    </div>

    @* Reservation Modal *@
    <div class="modal fade" id="reservationModal" tabindex="-1" aria-labelledby="reservationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reservationModalLabel">Make a Reservation at @Model.Profile.Name</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="reservationForm" asp-controller="Reservation" asp-action="Create" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="RestaurantID" value="@Model.RestaurantID" />
                        
                        <div class="mb-3">
                            <label for="ContactName" class="form-label">Contact Name</label>
                            <input type="text" class="form-control" id="ContactName" name="ContactName" required>
                        </div>

                        <div class="mb-3">
                            <label for="Phone" class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="Phone" name="Phone" required>
                        </div>

                        <div class="mb-3">
                            <label for="Email" class="form-label">Email Address</label>
                            <input type="email" class="form-control" id="Email" name="Email" required>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="ReservationDateTime" class="form-label">Date & Time</label>
                                <input type="datetime-local" class="form-control" id="ReservationDateTime" name="ReservationDateTime" required>
                            </div>

                            <div class="col-md-6 mb-3">
                                <label for="PartySize" class="form-label">Party Size</label>
                                <input type="number" class="form-control" id="PartySize" name="PartySize" min="1" max="20" required>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="SpecialRequests" class="form-label">Special Requests (Optional)</label>
                            <textarea class="form-control" id="SpecialRequests" name="SpecialRequests" rows="3"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" form="reservationForm" class="btn btn-primary">Submit Reservation</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">Restaurant details could not be loaded.</div>
}

@section Head {
    @* Add specific CSS if needed for this page *@
    <style>
        .restaurant-profile-header h1 { margin-bottom: 0.25rem; }
        .star-rating { color: #ffc107; } /* Example gold color */
        .price-level { font-weight: bold; }
        .sticky-top { /* Ensure sticky positioning works */
            position: -webkit-sticky;
            position: sticky;
        }
        #restaurantMap {
            border-radius: 4px;
            overflow: hidden;
        }
    </style>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            // Set minimum date/time for reservation to current time
            var now = new Date();
            var year = now.getFullYear();
            var month = String(now.getMonth() + 1).padStart(2, '0');
            var day = String(now.getDate()).padStart(2, '0');
            var hours = String(now.getHours()).padStart(2, '0');
            var minutes = String(now.getMinutes()).padStart(2, '0');
            
            var minDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
            $('#ReservationDateTime').attr('min', minDateTime);

            // Pre-fill user info if logged in
            @if (User.Identity.IsAuthenticated)
            {
                <text>
                $('#ContactName').val('@User.Identity.Name');
                $('#Email').val('@User.FindFirst(ClaimTypes.Email)?.Value');
                </text>
            }

            // Initialize the map
            initRestaurantMap();
        });

        function initRestaurantMap() {
            const map = new google.maps.Map(document.getElementById('restaurantMap'), {
                zoom: 15,
                center: { lat: 40.7128, lng: -74.0060 } // Default to NYC, will be updated
            });

            const geocoder = new google.maps.Geocoder();
            const address = '@($"{Model.Profile.Address}, {Model.Profile.City}, {Model.Profile.State} {Model.Profile.ZipCode}")';

            geocoder.geocode({ address: address }, (results, status) => {
                if (status === 'OK' && results[0]) {
                    const location = results[0].geometry.location;
                    const marker = new google.maps.Marker({
                        map: map,
                        position: location,
                        title: '@Model.Profile.Name'
                    });

                    const infoWindow = new google.maps.InfoWindow({
                        content: `
                            <div>
                                <h6>@Model.Profile.Name</h6>
                                <p>@Model.Profile.Address<br>
                                @Model.Profile.City, @Model.Profile.State @Model.Profile.ZipCode</p>
                            </div>
                        `
                    });

                    marker.addListener('click', () => {
                        infoWindow.open(map, marker);
                    });

                    map.setCenter(location);
                }
            });
        }
    </script>
}
