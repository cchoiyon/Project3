@model RestaurantDetailViewModel
@using System.Security.Claims
@{
    ViewData["Title"] = Model.Profile?.Name ?? "Restaurant Details";
    Layout = "_AppLayout"; // Use your main application layout
    
    // Add cache-busting timestamp
    var cacheBuster = DateTime.Now.Ticks;
}

@if (Model.Profile != null)
{
    @* --- Restaurant Header --- *@
    <div class="restaurant-profile-header mb-4">
        @* TODO: Add Profile Photo display logic if needed at top *@
        <h1>@Model.Profile.Name</h1>
        <div class="d-flex align-items-center mb-2">
             @* Display calculated average rating and price level *@
             <span class="star-rating me-3">
                 @* TODO: Render stars based on Model.AverageRatingDisplay or calculation *@
                 @Model.AverageRatingDisplay
             </span>
             <span class="price-level text-muted">
                  @* TODO: Render price level based on Model.AveragePriceLevelDisplay or calculation *@
                  @Model.AveragePriceLevelDisplay
             </span>
             @* TODO: Add link to reviews section? *@
        </div>
        <p class="text-muted">@Model.Profile.Cuisine - @Model.Profile.City, @Model.Profile.State</p>
        @* Make Reservation Button with AJAX loading *@
        <button type="button" class="btn btn-primary mt-2" 
                onclick="loadReservationModal(@Model.RestaurantID, '@Model.Profile.Name.Replace("'", "\\")')">
            <i class="bi bi-calendar-check me-2"></i>Make Reservation
        </button>
    </div>

    <hr />

    <div class="row">
        <div class="col-md-8"> @* Main content area *@

             @* --- Marketing Description --- *@
             @if (!string.IsNullOrWhiteSpace(Model.Profile.MarketingDescription))
             {
                 <section id="description" class="mb-4">
                     <h2>About @Model.Profile.Name</h2>
                     <p>@Model.Profile.MarketingDescription</p>
                 </section>
             }

             @* --- Photo Gallery --- *@
             @if (Model.Photos != null && Model.Photos.Any())
             {
                 <section id="photos" class="mb-4">
                     <h2>Photos</h2>
                     <div class="row row-cols-2 row-cols-md-3 g-3">
                         @foreach (var photo in Model.Photos)
                         {
                             <div class="col">
                                 <figure class="figure">
                                     @* TODO: Ensure PhotoURL is correct relative/absolute path *@
                                     <img src="@Url.Content(photo.PhotoURL ?? "~/images/restaurant-placeholder.png")" class="figure-img img-fluid rounded" alt="@(photo.Caption ?? Model.Profile.Name)">
                                     @if (!string.IsNullOrWhiteSpace(photo.Caption))
                                     {
                                         <figcaption class="figure-caption">@photo.Caption</figcaption>
                                     }
                                 </figure>
                             </div>
                         }
                     </div>
                 </section>
             }

             @* --- Reviews Section --- *@
             <section id="reviews" class="mb-4">
                 <h2>Reviews (@Model.Reviews.Count)</h2>
                 
                 @* Check if we're coming from a review update and should force refresh *@
                 @if (TempData["ForceRefresh"] != null && (bool)TempData["ForceRefresh"] == true)
                 {
                     <script>
                         // Force a complete reload to clear any browser caching
                         window.onload = function() {
                             // Add a slight delay to ensure the page is fully loaded first
                             setTimeout(function() {
                                 console.log("Forcing page refresh due to review update");
                                 window.location.reload(true);
                             }, 100);
                         };
                     </script>
                 }
                 
                 @if (Model.Reviews != null && Model.Reviews.Any())
                 {
                     @foreach (var review in Model.Reviews)
                     {
                         <div class="card mb-3">
                             <div class="card-body">
                                 <div class="d-flex justify-content-between">
                                     <h5 class="card-title mb-1">@review.ReviewerUsername</h5>
                                     <small class="text-muted">@review.VisitDate.ToString("MMMM d, yyyy")</small>
                                 </div>
                                 <div class="mb-3">
                                     @* Display star ratings in an appealing way *@
                                     <div class="review-ratings">
                                         <div class="review-rating-item">
                                             <span class="rating-label">Food:</span>
                                             <div class="mini-stars" data-timestamp="@cacheBuster">
                                                 @for (int i = 1; i <= 5; i++)
                                                 {
                                                     <i class="fas fa-star @(i <= review.FoodQualityRating ? "filled" : "empty")"></i>
                                                 }
                                             </div>
                                         </div>
                                         <div class="review-rating-item">
                                             <span class="rating-label">Service:</span>
                                             <div class="mini-stars" data-timestamp="@cacheBuster">
                                                 @for (int i = 1; i <= 5; i++)
                                                 {
                                                     <i class="fas fa-star @(i <= review.ServiceRating ? "filled" : "empty")"></i>
                                                 }
                                             </div>
                                         </div>
                                         <div class="review-rating-item">
                                             <span class="rating-label">Atmosphere:</span>
                                             <div class="mini-stars" data-timestamp="@cacheBuster">
                                                 @for (int i = 1; i <= 5; i++)
                                                 {
                                                     <i class="fas fa-star @(i <= review.AtmosphereRating ? "filled" : "empty")"></i>
                                                 }
                                             </div>
                                         </div>
                                         <div class="review-rating-item">
                                             <span class="rating-label">Price:</span>
                                             <div class="mini-stars" data-timestamp="@cacheBuster">
                                                 @for (int i = 1; i <= 5; i++)
                                                 {
                                                     <i class="fas fa-star @(i <= review.PriceRating ? "filled" : "empty")"></i>
                                                 }
                                             </div>
                                         </div>
                                     </div>
                                 </div>
                                 <p class="card-text">@review.Comments</p>
                                 
                                 @* Show edit/delete buttons if this review belongs to the current user *@
                                 @if (User.Identity.IsAuthenticated && 
                                      User.IsInRole("Reviewer") && 
                                      User.Identity.Name == review.ReviewerUsername)
                                 {
                                     <div class="review-actions mt-2">
                                         <a asp-controller="Review" asp-action="Edit" asp-route-id="@review.ReviewID" 
                                            class="btn btn-sm btn-outline-primary">
                                             <i class="fas fa-edit"></i> Edit
                                         </a>
                                         <a asp-controller="Review" asp-action="Delete" asp-route-id="@review.ReviewID" 
                                            asp-route-restaurantId="@Model.RestaurantID"
                                            class="btn btn-sm btn-outline-danger"
                                            onclick="return confirm('Are you sure you want to delete this review?');">
                                             <i class="fas fa-trash"></i> Delete
                                         </a>
                                     </div>
                                 }
                             </div>
                         </div>
                     }
                 }
                 else
                 {
                     <p>No reviews yet. Be the first to write one!</p>
                 }
                 @* Only show review button for reviewers *@
                 @if (User.IsInRole("Reviewer"))
                 {
                     <a asp-controller="Review" asp-action="Create" asp-route-restaurantId="@Model.RestaurantID" class="btn btn-secondary">Write a Review</a>
                 }
             </section>

        </div>
        <div class="col-md-4"> @* Sidebar Info *@
             <div class="card sticky-top" style="top: 20px;"> @* Make card sticky *@
                 <div class="card-body">
                     <h5 class="card-title">Restaurant Info</h5>
                     
                     @* --- Map Section --- *@
                     <div class="mb-3">
                         <div id="restaurantMap" style="height: 250px; width: 100%;"></div>
                     </div>

                     @* --- Address --- *@
                     <p class="mb-1">
                         <i class="fas fa-map-marker-alt me-2"></i> @* Font Awesome icon *@
                         @Model.Profile.Address<br />
                         @Model.Profile.City, @Model.Profile.State @Model.Profile.ZipCode
                     </p>

                     @* --- Contact --- *@
                     @if (!string.IsNullOrWhiteSpace(Model.Profile.Contact))
                     {
                         <p class="mb-1">
                             <i class="fas fa-phone me-2"></i>
                             @Model.Profile.Contact
                         </p>
                     }

                      @* --- Website --- *@
                     @if (!string.IsNullOrWhiteSpace(Model.Profile.WebsiteURL))
                     {
                         <p class="mb-1">
                              <i class="fas fa-globe me-2"></i>
                              @{
                                  var websiteUrl = Model.Profile.WebsiteURL;
                                  if (!websiteUrl.StartsWith("http")) { websiteUrl = "http://" + websiteUrl; }
                              }
                              <a href="@websiteUrl" target="_blank" rel="noopener noreferrer">Visit Website</a>
                         </p>
                     }

                     @* --- Hours --- *@
                      @if (!string.IsNullOrWhiteSpace(Model.Profile.Hours))
                     {
                         <p class="mb-1">
                             <i class="fas fa-clock me-2"></i>
                             Hours: @Model.Profile.Hours @* Consider formatting this better if possible *@
                         </p>
                     }

                     @* --- Get Directions Button --- *@
                     <div class="mt-3">
                         <a href="https://www.google.com/maps/search/?api=1&query=@Uri.EscapeDataString($"{Model.Profile.Address}, {Model.Profile.City}, {Model.Profile.State} {Model.Profile.ZipCode}")" 
                            target="_blank" class="btn btn-outline-primary btn-sm w-100">
                             <i class="fas fa-directions me-2"></i>Get Directions
                         </a>
                     </div>

                     @* --- Social Media --- *@
                     @* TODO: Add Social Media Links if available *@

                 </div>
             </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger">Restaurant details could not be loaded.</div>
}

@section Head {
    @* Add specific CSS if needed for this page *@
    <style>
        .restaurant-profile-header h1 { margin-bottom: 0.25rem; }
        .star-rating { color: #ffc107; } /* Example gold color */
        .price-level { font-weight: bold; }
        .sticky-top { /* Ensure sticky positioning works */
            position: -webkit-sticky;
            position: sticky;
        }
        #restaurantMap {
            border-radius: 4px;
            overflow: hidden;
        }

        /* Mini Star Rating Styles */
        .review-ratings {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 10px;
        }
        .review-rating-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        .rating-label {
            font-weight: 500;
            color: #666;
            font-size: 0.85rem;
            width: 80px;
        }
        .mini-stars {
            display: flex;
            gap: 2px;
        }
        .mini-stars .fas.fa-star {
            font-size: 0.8rem;
        }
        .mini-stars .fas.fa-star.filled {
            color: #ffc107; /* Gold color for filled stars */
        }
        .mini-stars .fas.fa-star.empty {
            color: #e0e0e0; /* Light gray for empty stars */
        }

        /* Style for user's own reviews */
        .card:has(.review-actions) {
            border-left: 3px solid #3498db;
        }
        .review-actions {
            border-top: 1px solid #f0f0f0;
            padding-top: 10px;
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Set minimum date/time for reservation to current time
            var now = new Date();
            var year = now.getFullYear();
            var month = String(now.getMonth() + 1).padStart(2, '0');
            var day = String(now.getDate()).padStart(2, '0');
            var hours = String(now.getHours()).padStart(2, '0');
            var minutes = String(now.getMinutes()).padStart(2, '0');
            
            var minDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
            
            // Initialize the map if it exists
            if (document.getElementById('restaurantMap')) {
                initRestaurantMap();
            }
        });

        function initRestaurantMap() {
            try {
                const map = new google.maps.Map(document.getElementById('restaurantMap'), {
                    zoom: 15,
                    center: { lat: 40.7128, lng: -74.0060 } // Default to NYC, will be updated
                });

                const geocoder = new google.maps.Geocoder();
                const address = '@($"{Model.Profile?.Address}, {Model.Profile?.City}, {Model.Profile?.State} {Model.Profile?.ZipCode}")';

                geocoder.geocode({ address: address }, (results, status) => {
                    if (status === 'OK' && results[0]) {
                        const location = results[0].geometry.location;
                        const marker = new google.maps.Marker({
                            map: map,
                            position: location,
                            title: '@Model.Profile?.Name'
                        });

                        const infoWindow = new google.maps.InfoWindow({
                            content: `
                                <div>
                                    <h6>@Model.Profile?.Name</h6>
                                    <p>@Model.Profile?.Address<br>
                                    @Model.Profile?.City, @Model.Profile?.State @Model.Profile?.ZipCode</p>
                                </div>
                            `
                        });

                        marker.addListener('click', () => {
                            infoWindow.open(map, marker);
                        });

                        map.setCenter(location);
                    }
                });
            } catch (e) {
                console.error("Error initializing map:", e);
            }
        }

        function loadReservationModal(restaurantId, restaurantName) {
            console.log("Loading reservation modal for: " + restaurantName + " (" + restaurantId + ")");
            // Load the reservation modal via AJAX
            fetch(`/Reservation/GetInitialModel?restaurantId=${restaurantId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to load reservation form');
                    }
                    return response.text();
                })
                .then(html => {
                    // Insert the modal HTML into the container
                    document.getElementById('reservationModalContainer').innerHTML = html;
                    
                    // Update the modal title with the restaurant name
                    var modalLabel = document.getElementById('reservationModalLabel');
                    if (modalLabel) {
                        modalLabel.textContent = 'Make a Reservation at ' + restaurantName;
                    }
                    
                    // Show the modal
                    var modal = new bootstrap.Modal(document.getElementById('reservationModal'));
                    modal.show();
                    
                    // Ensure click handlers are attached after the modal is loaded
                    setupModalEventHandlers();
                })
                .catch(error => {
                    console.error('Error loading reservation modal:', error);
                    alert('Sorry, there was a problem loading the reservation form. Please try again.');
                });
        }
        
        // Function to set up event handlers for the modal after it's loaded
        function setupModalEventHandlers() {
            console.log("Setting up modal event handlers");
            var submitButton = document.getElementById('submitReservation');
            
            if (submitButton) {
                submitButton.addEventListener('click', function() {
                    console.log("Submit button clicked");
                    
                    // Show spinner, hide submit button
                    this.classList.add('d-none');
                    document.getElementById('submitSpinner').classList.remove('d-none');
                    
                    // Hide any previous alerts
                    document.getElementById('reservationSuccess').classList.add('d-none');
                    document.getElementById('reservationError').classList.add('d-none');
                    document.getElementById('demoModeAlert').classList.add('d-none');
                    
                    // Get form data
                    var form = document.getElementById('reservationForm');
                    var formData = new FormData(form);
                    
                    // Create URL-encoded string from FormData
                    var urlEncodedData = new URLSearchParams(formData).toString();
                    
                    // Submit form using fetch API
                    fetch('@Url.Action("CreateAjax", "Reservation")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded'
                        },
                        body: urlEncodedData
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log("Response received:", data);
                        if (data.success) {
                            if (data.message && data.message.includes('demo mode')) {
                                // Show demo mode message
                                document.getElementById('demoMessage').textContent = data.message;
                                document.getElementById('demoModeAlert').classList.remove('d-none');
                            }
                            
                            // Show success view
                            document.getElementById('reservationFormContainer').classList.add('d-none');
                            document.getElementById('successView').classList.remove('d-none');
                            
                            // Switch footer buttons
                            document.getElementById('formFooterButtons').classList.add('d-none');
                            document.getElementById('successFooterButtons').classList.remove('d-none');
                        } else {
                            // Show error message
                            document.getElementById('errorMessage').textContent = data.message || 'There was a problem submitting your reservation.';
                            document.getElementById('reservationError').classList.remove('d-none');
                            
                            // Display validation errors if any
                            if (data.errors) {
                                var validationSummary = document.getElementById('validationSummary');
                                validationSummary.innerHTML = '<ul class="mb-0 ps-3"></ul>';
                                var summaryList = validationSummary.querySelector('ul');
                                
                                // Reset all error messages first
                                document.querySelectorAll('[data-valmsg-for]').forEach(span => {
                                    span.textContent = '';
                                });
                                
                                Object.keys(data.errors).forEach(function(key) {
                                    // Add errors to validation summary
                                    var li = document.createElement('li');
                                    li.textContent = data.errors[key];
                                    summaryList.appendChild(li);
                                    
                                    // Add error message to the field
                                    var fieldName = key;
                                    // Handle property paths (e.g., convert "User.Email" to "Email")
                                    if (fieldName.includes('.')) {
                                        fieldName = fieldName.split('.').pop();
                                    }
                                    
                                    var errorSpan = document.querySelector('[data-valmsg-for="' + fieldName + '"]');
                                    if (errorSpan) {
                                        errorSpan.textContent = data.errors[key];
                                        // Highlight the input field with error
                                        var inputField = document.getElementById(fieldName);
                                        if (inputField) {
                                            inputField.classList.add('is-invalid');
                                        }
                                    }
                                });
                                
                                // Scroll to the top of the form to show errors
                                document.getElementById('reservationFormContainer').scrollIntoView();
                            }
                        }
                    })
                    .catch(error => {
                        console.error('AJAX Error:', error);
                        // Show error message
                        document.getElementById('errorMessage').textContent = 'An error occurred while processing your request. Please try again.';
                        document.getElementById('reservationError').classList.remove('d-none');
                    })
                    .finally(() => {
                        // Hide spinner, show submit button again
                        document.getElementById('submitSpinner').classList.add('d-none');
                        submitButton.classList.remove('d-none');
                    });
                });
            }
            
            // Set up reset form button if it exists
            var resetButton = document.getElementById('resetReservationButton');
            if (resetButton) {
                resetButton.addEventListener('click', resetReservationForm);
            }
        }
        
        function resetReservationForm() {
            // Reset form and show it again
            var form = document.getElementById('reservationForm');
            if (form) form.reset();
            
            // Switch between views
            document.getElementById('successView').classList.add('d-none');
            document.getElementById('reservationFormContainer').classList.remove('d-none');
            
            // Switch footer buttons
            document.getElementById('successFooterButtons').classList.add('d-none');
            document.getElementById('formFooterButtons').classList.remove('d-none');
            
            // Hide alerts
            document.getElementById('reservationSuccess').classList.add('d-none');
            document.getElementById('reservationError').classList.add('d-none');
            document.getElementById('demoModeAlert').classList.add('d-none');
            
            // Clear validation errors
            document.querySelectorAll('.text-danger').forEach(function(element) {
                element.textContent = '';
            });
            if (document.getElementById('validationSummary')) {
                document.getElementById('validationSummary').innerHTML = '';
            }
            
            // Remove is-invalid class from all inputs
            document.querySelectorAll('input, textarea').forEach(function(input) {
                input.classList.remove('is-invalid');
            });
        }
    </script>
}

@* Add a container for the modal *@
<div id="reservationModalContainer"></div>
