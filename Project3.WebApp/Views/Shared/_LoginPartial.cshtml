@using Microsoft.AspNetCore.Identity
@using System.Security.Claims

@* Inject services if needed, e.g., for user manager, but basic auth check uses User.Identity *@

<ul class="navbar-nav">
    @if (User.Identity != null && User.Identity.IsAuthenticated)
    {
        @* User is logged in - Show welcome message and Logout button *@
        <li class="nav-item">
            @* You can customize the greeting, maybe fetch user's first name if stored in claims *@
            <span class="nav-link text-dark">Hello @User.Identity.Name!</span>
            @* Or use: <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @User.Identity.Name!</a> *@
        </li>
        <li class="nav-item">
            @* Logout needs to be a form to ensure it's a POST request for security *@
            <form class="form-inline" asp-controller="Account" asp-action="Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })" method="post">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        @* User is not logged in - Show Register and Login links *@
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Account" asp-action="Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Login</a>
        </li>
    }
</ul>
